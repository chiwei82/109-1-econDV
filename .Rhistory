# Chunk 17
Copy
gs4_deauth()
gs4_auth()
) -> startSalary2
# 設定class
startSalary2 %>%
mutate(
across(
`高級中等(高中、高職)`:大學,
~parse_number(as.character(.x), na="...")
)
) -> startSalary3
# 改變數名稱
startSalary3 %>%
rename(
year=`...1`
)
}
{
startSalary %>% map(class)
# 以字串形式觀察原始資料以理解na註記形式
startSalary %>%
map(
~parse_character(as.character(.x))
)
# 去除34-36行
startSalary %>%
slice(
1:33
) -> startSalary2
# 設定class
startSalary2 %>%
mutate(
across(
`高級中等(高中、高職)`:大學,
~parse_number(as.character(.x), na="...")
)
) -> startSalary3
# 改變數名稱
startSalary3 %>%
rename(
year=`...1`
)
}
install.packages("reader")
library(reader)
library(readr)
# Chunk 1
DF=data.frame(
y=c(1,3,5),
x=c(0,-1,1)
)
# Chunk 2
# without dplyr
{
DF$z=DF$y+(DF$x)^2
mean(DF$z)
}
# with dplyr
{
mutate(DF, z=y+x^2) -> DF
summarise(DF, meanz=mean(z)) -> DF_meanz
DF_meanz
mean(DF$z)
}
# Using pipe operator
{
DF %>%
mutate(z=y+x^2) %>%
summarise(meanz=mean(z))
}
# Chunk 3
with(DF,{
w=y-x^2
w # 沒這行便沒有回傳值
} )
within(DF,
{
w=y-x^2
q=3*y+w
})
# Chunk 4
targetUrl <- "https://data.ntpc.gov.tw/api/datasets/71CD1490-A2DF-4198-BEF1-318479775E8A/json"
library(jsonlite)
list_newTaipeiYouBike <- fromJSON(
targetUrl, simplifyDataFrame = F) # list class
df_newTaipeiYouBike <- fromJSON(
targetUrl) # data.frame class
# Chunk 5
df_newTaipeiYouBike %>%
mutate(
tot=as.integer(tot),
sbi=as.integer(sbi),
bemp=as.integer(bemp),
車位落差=tot-(sbi+bemp), # 創立新變數
有落差=(車位落差!=0) # 前面出現過的可立刻拿來運算
) -> df_newTaipeiYouBike2
df_newTaipeiYouBike %>%
transmute( # 只留下這裡的變數
tot=as.integer(tot),
sbi=as.integer(sbi),
bemp=as.integer(bemp),
車位落差=tot-(sbi+bemp), # 創立新變數
有落差=(車位落差!=0) # 前面出現過的可立刻拿來運算
) -> df_newTaipeiYouBike3
# Chunk 6
{
View(df_newTaipeiYouBike2)
View(df_newTaipeiYouBike3)
}
# Chunk 7
viewDataFrames = {
View(df_newTaipeiYouBike2)
View(df_newTaipeiYouBike3)
}
viewDataFrames
# Chunk 8
viewDataFrames = {
View(df_newTaipeiYouBike2)
View(df_newTaipeiYouBike3)
df_newTaipeiYouBike2
}
viewDataFrames
# Chunk 9
df_newTaipeiYouBike %>%
summarise(
sna=sum(is.na(sna)),
sno=sum(is.na(sno))
)
# Use %>% to observe formula body
df_newTaipeiYouBike %>%
summarise(
sna=sna %>% {sum(is.na(.))},
sno=sno %>% {sum(is.na(.))}
)
# Chunk 10
data01$df_newTaipeiYouBike ->df_newTaipeiYouBike
names(df_newTaipeiYouBike)
# Chunk 11
df_newTaipeiYouBike %>%
transmute(
across(
.cols=tot:mday,
.fns = ~.x
)
)
df_newTaipeiYouBike %>%
transmute(
across(
.cols=any_of(c("aaa", "sna")),
.fns = ~.x
)
)
# Chunk 12
df_newTaipeiYouBike %>%
transmute(
across(
.cols= contains("a") & sbi:sareaen,
.fns= ~.x
)
)
# Chunk 13
# summarise(., across(selector, functions))
df_newTaipeiYouBike %>%
summarise(
across(
everything(),
~{sum(is.na(.x))}
)
)
# Chunk 14
youBikeRightClass = { # deal with class
df_newTaipeiYouBike %>% map(class)
numericVs <- c("tot","sbi","lat","lng")
df_newTaipeiYouBike %>%
mutate(
across(
all_of(numericVs),
as.numeric
)
) -> df_newTaipeiYouBike2
factorVs <- c("sarea")
df_newTaipeiYouBike2 %>%
mutate(
across(
all_of(factorVs),
as.factor
)
) -> df_newTaipeiYouBike3
df_newTaipeiYouBike3 %>%
mutate(
mday=ymd_hms(mday)
)
}
# Chunk 15
checkNA={
totNA <- function(.x) sum(is.na(.x))
smplSize <- function(.x) length(.x) - totNA(.x)
youBikeRightClass %>%
summarise(
across(
everything(),
list(na=totNA, size=smplSize) # na, size會成為欄位名稱一部份
)
)
}
# Chunk 16
Copy
library(googlesheets4)
read_sheet(
"https://docs.google.com/spreadsheets/d/1PPWeFGqedVsgZmV81MeA0oJDCBkj5upkHltlWap7xUY/edit#gid=1835013852",
skip=3
) -> startSalary
# Chunk 17
Copy
gs4_deauth()
gs4_auth()
) -> startSalary2
# 設定class
startSalary2 %>%
mutate(
across(
`高級中等(高中、高職)`:大學,
~parse_number(as.character(.x), na="...")
)
) -> startSalary3
# 改變數名稱
startSalary3 %>%
rename(
year=`...1`
)
}
{
startSalary %>% map(class)
# 以字串形式觀察原始資料以理解na註記形式
startSalary %>%
map(
~parse_character(as.character(.x))
)
# 去除34-36行
startSalary %>%
slice(
1:33
) -> startSalary2
# 設定class
startSalary2 %>%
mutate(
across(
`高級中等(高中、高職)`:大學,
~parse_number(as.character(.x), na="...")
)
) -> startSalary3
# 改變數名稱
startSalary3 %>%
rename(
year=`...1`
)
}
price <- c("$10.000,23", "$999,15", "n/a")
parse_number(price,
na="n/a",
locale=locale(decimal_mark = ",", grouping_mark = "."))
price <- c("$10.000,23", "$999,15", "n/a")
parse_number(price,
na="n/a",
locale=locale(decimal_mark = ",", grouping_mark = "."))
startSalary %>% map(class)
# 以字串形式觀察原始資料以理解na註記形式
startSalary %>%
map(
~parse_character(as.character(.x))
)
# 去除34-36行
startSalary %>%
slice(
1:33
) -> startSalary2
# 設定class
startSalary2 %>%
mutate(
across(
`高級中等(高中、高職)`:大學,
~parse_number(as.character(.x), na="...")
)
) -> startSalary3
# 改變數名稱
startSalary3 %>%
rename(
year=`...1`
)
{
# 全部有多少個車位
youBikeRightClass %>%
summarise(
tot=sum(tot)) -> totAll
# 各行政區有幾個車位
youBikeRightClass %>%
group_by(sarea) %>%
summarise(
tot=sum(tot)
) -> totByArea
# 那個行政區最多/最少
totByArea %>%
arrange(tot)
totByArea %>%
arrange(desc(tot))
# 前三名
totByArea %>%
slice_max(tot, n=3)
# 前50%
totByArea %>%
slice_max(tot, prop=0.5)
# 後三名
totByArea %>%
slice_min(tot, n=3)
}
{
# 全部有多少個車位
youBikeRightClass %>%
summarise(
tot=sum(tot)) -> totAll
# 各行政區有幾個車位
youBikeRightClass %>%
group_by(sarea) %>%
summarise(
tot=sum(tot)
) -> totByArea
# 那個行政區最多/最少
totByArea %>%
arrange(tot)
totByArea %>%
arrange(desc(tot))
# 前三名
totByArea %>%
slice_max(tot, n=3)
# 前50%
totByArea %>%
slice_max(tot, prop=0.5)
# 後三名
totByArea %>%
slice_min(tot, n=3)
}
youBikeRightClass = { # deal with class
df_newTaipeiYouBike %>% map(class)
numericVs <- c("tot","sbi","lat","lng")
df_newTaipeiYouBike %>%
mutate(
across(
all_of(numericVs),
as.numeric
)
) -> df_newTaipeiYouBike2
factorVs <- c("sarea")
df_newTaipeiYouBike2 %>%
mutate(
across(
all_of(factorVs),
as.factor
)
) -> df_newTaipeiYouBike3
df_newTaipeiYouBike3 %>%
mutate(
mday=ymd_hms(mday)
)
}
library(lubridate)
youBikeRightClass = { # deal with class
df_newTaipeiYouBike %>% map(class)
numericVs <- c("tot","sbi","lat","lng")
df_newTaipeiYouBike %>%
mutate(
across(
all_of(numericVs),
as.numeric
)
) -> df_newTaipeiYouBike2
factorVs <- c("sarea")
df_newTaipeiYouBike2 %>%
mutate(
across(
all_of(factorVs),
as.factor
)
) -> df_newTaipeiYouBike3
df_newTaipeiYouBike3 %>%
mutate(
mday=ymd_hms(mday)
)
}
{
# 全部有多少個車位
youBikeRightClass %>%
summarise(
tot=sum(tot)) -> totAll
# 各行政區有幾個車位
youBikeRightClass %>%
group_by(sarea) %>%
summarise(
tot=sum(tot)
) -> totByArea
# 那個行政區最多/最少
totByArea %>%
arrange(tot)
totByArea %>%
arrange(desc(tot))
# 前三名
totByArea %>%
slice_max(tot, n=3)
# 前50%
totByArea %>%
slice_max(tot, prop=0.5)
# 後三名
totByArea %>%
slice_min(tot, n=3)
}
# 全部有多少個車位
youBikeRightClass %>%
summarise(
tot=sum(tot)) -> totAll
# 各行政區有幾個車位
youBikeRightClass %>%
group_by(sarea) %>%
summarise(
tot=sum(tot)
) -> totByArea
# 那個行政區最多/最少
totByArea %>%
arrange(tot)
# 前三名
totByArea %>%
slice_max(tot, n=3)
# 前50%
totByArea %>%
slice_max(tot, prop=0.5)
{
# 找出總車位數大於20的樣本
youBikeRightClass %>%
filter(
tot > 20
)
# 找出總車位數大於20的樣本
youBikeRightClass %>%
filter(
tot > 20 & sarea=="汐止區"
)
youBikeRightClass %>%
filter(
tot > 20 , sarea=="汐止區" # 或，分隔
)
}
{
youBikeRightClass %>%
select(sno:tot)
youBikeRightClass %>%
select(1:3)
youBikeRightClass %>%
select(contains("a"))
youBikeRightClass %>%
select(matches("a$"))
}
install.packages("tidyr")
library(tidyr)
detach("package:tidyr", unload = TRUE)
library(tidyr)
library(WDI)
WDIsearch(string="Inflation") -> inflation_search
inflation_search
target_series <- inflation_search[1,]
WDI(
indicator = target_series[["indicator"]]
) -> world_inflation
WDI(
indicator = target_series[["indicator"]]
) -> world_inflation %>% print()
world_inflation
target_series <- inflation_search[1,]
WDI(
indicator = target_series[["indicator"]]
) -> world_inflation
WDI(
indicator = target_series[["indicator"]]
) -> world_inflation
2
target_series <- inflation_search[1,]
WDI(
indicator = target_series[["indicator"]]
) -> world_inflation
xml2::as_list(cpiTW) -> cpiTW
xml2::as_list(cpiTW) -> cpiTW
xml2::as_list(cpiTW)
library(xml2)
read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") -> cpiTW
xml2::as_list(cpiTW) -> cpiTW
library(dplyr)
library(tidyr)
library(stringr)
library(googledrive)
library(readr)
library(ggplot2)
library(econDV)
font_families_google() %>%
stringr::str_subset(regex("noto", ignore_case = T))
font_add_google("Noto Sans TC")
rprojroot::is_rstudio_project -> .pj
.pj$make_fix_file() -> .root
imageFolder <- file.path(.root(),"img")
dataFolder <- file.path(.root(),"data")
if(!dir.exists(imageFolder)) dir.create(imageFolder)
if(!dir.exists(dataFolder)) dir.create(dataFolder)
xfun::download_file("https://www.dropbox.com/s/7b3nbgfx5bgft8g/drake_annotationmaps.Rdata?dl=1")
load("drake_annotationmaps.Rdata")
